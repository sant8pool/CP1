pipeline {
    agent any
    
    stages {
        stage('GetCode') {
            steps {
                //obtener codigo
                git 'https://github.com/sant8pool/CP1'
                bat 'dir'
                bat 'set PYTHONPATH=%WORKSPACE%'
            }
        }    
        
        stage('Unit') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    bat '''
                        set PYTHONPATH=%WORKSPACE%
                        coverage run --branch --source=app --omit=app\\__init__.py,app\\api.py -m pytest test\\unit
                        coverage xml
                    '''
                }
            }
        }    
                    
        stage('Coverage') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    cobertura coberturaReportFile: 'coverage.xml', conditionalCoverageTargets: '100,0,90', lineCoverageTargets: '100,0,95'
                }    
            }
        }
        
        stage('Static') {
            steps {
                bat '''
                    flake8 --exit-zero --format=pylint app >flake8.out
                '''
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')], qualityGates: [[threshold: 8, type: 'TOTAL', unstable: true], [threshold: 10, type: 'TOTAL', unstable: false]]
                }
            }
        }
        
        stage('Security') {
            steps {
                bat '''
                    bandit --exit-zero -r . -f custom -o bandit.out --msg-template "{abspath}:{line}: [{test_id}] {msg}"
                '''
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')], qualityGates: [[threshold: 2, type: 'TOTAL', unstable: true], [threshold: 4, type: 'TOTAL', unstable: false]]
                }
            }
        }
        
        stage('Performance') {
            steps {
                bat '''
                    set FLASK_APP=app\\api.py
                    start flask run
                    C:\\Users\\Mikel\\UNIR\\apache-jmeter-5.6.3\\bin\\jmeter -n -t C:\\Users\\Mikel\\UNIR\\apache-jmeter-5.6.3\\bin\\Test1.jmx -f -l flask.jtl
                '''
                perfReport sourceDataFiles: 'flask.jtl'
            }    
        }
    }    
}    
